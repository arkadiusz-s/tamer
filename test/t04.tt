// -*- mode: c++ -*-
#include <tamer/tamer.hh>
#include <string.h>
#include <stdio.h>
#define NUM_ITERS 50000000

tamed void crunch2tamer(int x, int *r) {
  *r = x * 2 - 1;
}

tamed void crunch1tamer(int x, int *r) {
  crunch2tamer(x, r);
  *r *= -1;
}

void crunch2inline(int x, int *r) {
  *r = x * 2 - 1;
}

void crunch1inline(int x, int *r) {
  crunch2inline(x, r);
  *r *= -1;
}

void crunch2outline(int, int *) __attribute__((noinline));
void crunch2outline(int x, int *r) {
  *r = x * 2 - 1;
}

void crunch1outline(int, int *) __attribute__((noinline));
void crunch1outline(int x, int *r) {
  crunch2outline(x, r);
  *r *= -1;
}

int main(int argc, char **argv) {
  (void) argc, (void) argv;
  int i;

  int r = 1;

  if (argc == 1 || (argc > 1 && strcmp(argv[1], "tamer") == 0)) {
      for (i = 0; i < NUM_ITERS; i++)
	  crunch1tamer(r, &r);
  } else if (argc > 1 && strcmp(argv[1], "inline") == 0) {
      for (i = 0; i < NUM_ITERS; i++)
	  crunch1inline(r, &r);
  } else if (argc > 1 && strcmp(argv[1], "outline") == 0) {
      for (i = 0; i < NUM_ITERS; i++)
	  crunch1outline(r, &r);
  } else
      fprintf(stderr, "expected tamer, inline, or outline\n");

  printf("%d\n", r);
  return 0;
}
