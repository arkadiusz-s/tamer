// -*- mode: c++ -*-
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <signal.h>
#include <tamer/tamer.hh>
#include <tamer/adapter.hh>

int n;

tamed void delay1(int x, tamer::event<> e) {
    n++;
    twait { tamer::at_delay_msec(x, make_event()); }
    fprintf(stderr, "%d.%06d: %d!\n", tamer::driver::main->now.tv_sec, tamer::driver::main->now.tv_usec, x);
    n--;
    e.trigger();
}

tamed void stdiny() {
    tvars { int fail = -1; }
    n++;
    twait {
	//tamer::at_fd_read(0, with_timeout(t, make_event(), fail));
	//tamer::at_fd_read(0, with_signal(SIGINT, make_event(), fail));
	tamer::at_fd_read(0, make_event());
    }
    fprintf(stderr, "====stdin result %d\n", fail);
    n--;
}

tamed void waitr(tamer::rendezvous<int> &r) {
    tvars { int x (); }
    n++;
    fprintf(stderr, "====waitr %d\n", x);
    twait(r, x);
    fprintf(stderr, "====waitr %d\n", x);
    n--;
}

tamed void waitsig() {
    tvars { int i (0); }
    while (i < 3) {
	n++;
	twait {
	    tamer::at_signal(SIGINT, make_event());
	}
	n--;
	fprintf(stderr, "== sig %d\n", i);
	i++;
    }
    fprintf(stderr, "== exit\n");
}

tamed void scatter() {
    tvars { int i(1); tamer::rendezvous<int> r; tamer::event<> e; }
    n++;
    tamer::at_delay_msec(500, e = tamer::distribute(tamer::distribute(tamer::make_event(r, i), tamer::make_event(r, 2)), tamer::make_event(r, 3)));
    (void) tamer::distribute(e, tamer::make_event(r, 4));
    while (r.nevents()) {
	twait(r, i);
	fprintf(stderr, "=== distributed %d\n", i);
    }
    n--;
}

tamed void cancellina() {
    tvars { int i(1); tamer::rendezvous<int> r; tamer::event<> e; }
    n++;
    tamer::at_delay_msec(500, e = tamer::make_event(r, 1));
    e.at_cancel(tamer::make_event(r, 100));
    e.at_cancel(tamer::make_event(r, 101));
    e.at_cancel(tamer::make_event(r, 102));
    e.cancel();
    while (r.nevents()) {
	twait(r, i);
	fprintf(stderr, "=== cancelled %d\n", i);
    }
    n--;
}

tamed void cancellina2() {
    tvars { int i(1); tamer::rendezvous<int> r; tamer::event<> e1;
	tamer::event<> e2; tamer::event<> e3; }
    n++;
    e1 = tamer::make_event(r, 1);
    e2 = tamer::make_event(r, 2);
    e3 = tamer::make_event(r, 3);
    tamer::at_delay_msec(500, tamer::distribute(e1, e2, e3));
    e1.cancel();
    e2.cancel();
    e3.cancel();
    while (r.nevents()) {
	twait(r, i);
	fprintf(stderr, "=== cancelled %d\n", i);
    }
    fprintf(stderr, "=== done cancellina2\n");
    n--;
}

tamed void bindery() {
    tvars { int i(1); tamer::rendezvous<> r; tamer::event<int> e;
	tamer::event<> ee; }
    n++;
    twait {
	tamer::at_delay_msec(600, tamer::bind(make_event(i), 2));
	fprintf(stderr, "=== before bindery %d\n", i);
    }
    fprintf(stderr, "=== after bindery %d\n", i);
    tamer::at_delay_msec(600, tamer::bind(e = make_event(r, i), 3));
    e.cancel();
    while (r.nevents()) {
	twait(r);
	fprintf(stderr, "=== got bindery\n");
    }
    fprintf(stderr, "=== after bindery 2 %d\n", i);
    tamer::at_delay_msec(600, ee = tamer::bind(make_event(r, i), 4));
    ee.cancel();
    while (r.nevents()) {
	twait(r);
	fprintf(stderr, "=== got bindery\n");
    }
    fprintf(stderr, "=== after bindery 3 %d\n", i);
    n--;
}

int main(int, char **) {
    tamer::rendezvous<int> r;
    fprintf(stderr, "???????? *** %d\n\n", getpid());
    tamer::initialize();
    waitr(r);
    delay1(100, tamer::event<>());
    delay1(1000, tamer::make_event(r, 10));
    delay1(250, tamer::event<>());
    delay1(400, tamer::event<>());
    scatter();
    cancellina();
    cancellina2();
    bindery();
    //fcntl(0, F_SETFD, O_NONBLOCK);
    //stdiny();
    //waitsig();
    while (n > 0)
	tamer::once();
    fprintf(stderr, "!\n");
}
