// -*- mode: c++ -*-
/* Copyright (c) 2007, Eddie Kohler
 * Copyright (c) 2007, Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, subject to the conditions
 * listed in the Tamer LICENSE file. These conditions include: you must
 * preserve this copyright notice, and you cannot mention the copyright
 * holders in advertising related to the Software without their permission.
 * The Software is provided WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED. This
 * notice is a summary of the Tamer LICENSE file; the license in that file is
 * legally binding.
 */
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <signal.h>
#include <tamer/tamer.hh>
#include <tamer/adapter.hh>

int n;

tamed void delay1(int x, tamer::event<> e) {
    n++;
    twait { tamer::at_delay_msec(x, make_event()); }
    fprintf(stderr, "%ld.%06d: %d!\n", (long int) tamer::driver::main->now.tv_sec, (int) tamer::driver::main->now.tv_usec, x);
    n--;
    e.trigger();
}

tamed void stdiny() {
    tvars { int fail = -1; }
    n++;
    twait {
	//tamer::at_fd_read(0, with_timeout(t, make_event(), fail));
	//tamer::at_fd_read(0, with_signal(SIGINT, make_event(), fail));
	tamer::at_fd_read(0, make_event());
    }
    fprintf(stderr, "====stdin result %d\n", fail);
    n--;
}

tamed void waitr(tamer::rendezvous<int> &r) {
    tvars { int x (); }
    n++;
    fprintf(stderr, "====waitr %d\n", x);
    twait(r, x);
    fprintf(stderr, "====waitr %d\n", x);
    n--;
}

tamed void waitsig() {
    tvars { int i (0); }
    while (i < 3) {
	n++;
	twait {
	    tamer::at_signal(SIGINT, make_event());
	}
	n--;
	fprintf(stderr, "== sig %d\n", i);
	i++;
    }
    fprintf(stderr, "== exit\n");
}

tamed void scatter() {
    tvars { int i(1); tamer::rendezvous<int> r; tamer::event<> e, e2; }
    n++;
    tamer::at_delay_msec(500, e = tamer::distribute(tamer::make_event(r, i), tamer::make_event(r, 2), tamer::make_event(r, 3)));
    tamer::at_delay_msec(502, tamer::distribute(tamer::make_event(r, 0), e));
    while (r.nevents()) {
	twait(r, i);
	fprintf(stderr, "=== distributed %d\n", i);
    }
    // should print "== distributed 1, 2, 3, 0"

    tamer::at_delay_msec(500, e = tamer::distribute(tamer::make_event(r, 1), tamer::make_event(r, 2), tamer::make_event(r, 3)));
    (void) tamer::distribute(e, tamer::make_event(r, 0));
    // should print "avoided leak of active event" (because we just threw away
    // that event), then "== distributed 1, 2, 3, 0"
    while (r.nevents()) {
	twait(r, i);
	fprintf(stderr, "=== distributed %d\n", i);
    }
    n--;
}

tamed void cancellina() {
    tvars { int i(1); tamer::rendezvous<int> r; tamer::event<> e; }
    n++;
    tamer::at_delay_msec(500, e = tamer::make_event(r, 1));
    e.at_trigger(tamer::make_event(r, 100));
    e.at_trigger(tamer::make_event(r, 101));
    e.at_trigger(tamer::make_event(r, 102));
    e.trigger();
    while (r.nevents()) {
	twait(r, i);
	fprintf(stderr, "=== triggered %d\n", i);
    }
    n--;
}

tamed void cancellina2() {
    tvars { int i(1), j(1); tamer::rendezvous<int, int> r; tamer::event<> e1;
	tamer::event<> e2; tamer::event<> e3; tamer::event<> e4; }
    n++;
    e1 = tamer::make_event(r, 1, 1);
    e2 = tamer::make_event(r, 2, 2);
    e3 = tamer::make_event(r, 3, 3);
    e4 = tamer::distribute(e1, e2, e3);
    tamer::at_delay_msec(500, e4);
    e1.trigger();
    e2.trigger();
    e3.trigger();
    if (e4)
	fprintf(stderr, "=== SHOULD NOT HAVE e4\n");
    while (r.nevents()) {
	twait(r, i, j);
	fprintf(stderr, "=== triggered %d %d\n", i, j);
    }
    fprintf(stderr, "=== done cancellina2\n");
    n--;
}

tamed void bindery() {
    tvars { int i(1); tamer::rendezvous<> r; tamer::event<int> e;
	tamer::event<> ee; }
    n++;
    twait {
	tamer::at_delay_msec(600, tamer::bind(make_event(i), 2));
	fprintf(stderr, "=== before bindery %d\n", i);
    }
    fprintf(stderr, "=== after bindery %d\n", i);
    tamer::at_delay_msec(600, tamer::bind(e = make_event(r, i), 3));
    e.unblocker().trigger();
    while (r.nevents()) {
	twait(r);
	fprintf(stderr, "=== got bindery\n");
    }
    fprintf(stderr, "=== after bindery 2 %d\n", i);
    // should print "after bindery 2 2", b/c e.unblocker() was triggered,
    // avoiding the bind
    tamer::at_delay_msec(600, ee = tamer::bind(make_event(r, i), 4));
    ee.unblocker().trigger();
    while (r.nevents()) {
	twait(r);
	fprintf(stderr, "=== got bindery\n");
    }
    fprintf(stderr, "=== after bindery 3 %d\n", i);
    // should print "after bindery 3 4", b/c ee.unblocker() == ee was
    // triggered, affecting the bind
    n--;
}

int add1(int x) {
    return x + 1;
}

tamed void mappery() {
    tvars { int i(1); tamer::rendezvous<> r; tamer::event<int> e;
	tamer::event<> ee; }
    n++;
    twait {
	tamer::at_delay_msec(700, tamer::bind(tamer::map<int>(make_event(i), add1), 2));
	fprintf(stderr, "=== before mappery %d\n", i);
    }
    fprintf(stderr, "=== after mappery %d\n", i); // should be 3
    twait {
	tamer::at_delay_msec(700, tamer::bind(tamer::map<int>(e = make_event(i), add1), 4));
	e.unblocker().trigger();
	fprintf(stderr, "=== before mappery %d\n", i);
    }
    fprintf(stderr, "=== after mappery %d\n", i); // should be 3, since the unblocker executed
    twait {
	tamer::at_asap(tamer::bind(tamer::map<int>(e = make_event(i), add1), 10));
    }
    fprintf(stderr, "=== after mappery %d\n", i); // should be 11
    n--;
}

int main(int, char **) {
    tamer::rendezvous<int> r;
    fprintf(stderr, "???????? *** %d\n\n", getpid());
    tamer::initialize();
    waitr(r);
    delay1(100, tamer::event<>());
    delay1(1000, tamer::make_event(r, 10));
    delay1(250, tamer::event<>());
    delay1(400, tamer::event<>());
    scatter();
    cancellina();
    cancellina2();
    bindery();
    mappery();
    //fcntl(0, F_SETFD, O_NONBLOCK);
    //stdiny();
    //waitsig();
    while (n > 0)
	tamer::once();
    fprintf(stderr, "!\n");
}
