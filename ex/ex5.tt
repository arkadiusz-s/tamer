// -*- mode: c++ -*-
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <signal.h>
#include <tamer/tamer.hh>
#include <tamer/lock.hh>
using namespace tamer;

tamer::mutex m;

tamed void exclusive(int which) {
    tvars { int ret = 0; }
    if (which == 4 && 0)
	twait { m.acquire(with_timeout_msec(1200, make_event(), ret)); }
    else
	twait { m.acquire(make_event()); }
    if (ret >= 0) {
	printf("%d: acquired\n", which);
	twait { tamer::at_delay_sec(1, make_event()); }
	m.release();
	printf("%d: released\n", which);
    } else
	printf("%d: canceled\n", which);
}

tamed void shared(int which) {
    twait { m.acquire_shared(make_event()); }
    printf("%d: acquired shared\n", which);
    twait { tamer::at_delay_sec(1, make_event()); }
    m.release_shared();
    printf("%d: released shared\n", which);
}

int main(int, char *[]) {
    tamer::initialize();
    exclusive(1);
    shared(2);
    shared(3);
    exclusive(4);
    shared(5);
    while (!tamer::driver_empty())
	tamer::once();
}
