
/* $Id: tame.cc,v 1.2 2007-05-05 17:12:28 kohler Exp $ */

#include "tame.hh"
#include <iostream>

parse_state_t *state;
bool tamer_debug = false;

std::ostream &warn = std::cerr;

static void
usage ()
{
  warn  << "usage: tamer [-Lchnv] "
	<< "[-o <outfile>] [<infile>]\n"
	<< "\n"
	<< "  Flags:\n"
	<< "    -g  turn on debugging support\n"
	<< "    -n  turn on newlines in autogenerated code\n"
	<< "    -L  disable line number translation\n"
	<< "    -h  show this screen\n"
	<< "    -v  show version number and exit\n"
	<< "\n"
	<< "  Options:\n"
	<< "    -o  specify output file\n"
	<< "    -c  compile mode; infer output file name from input file "
	<< "name\n"
	<< "    -b  basename mode; strip off dirs from input file name\n"
	<< "\n"
	<< "  If no input or output files are specified, then standard in\n"
	<< "  and out are assumed, respectively.\n"
	<< "\n"
    << "  Environment Variables:\n"
	<< "    TAME_NO_LINE_NUMBERS  equivalent to -L\n"
	<< "    TAME_ADD_NEWLINES     equivalent to -n\n"
	<< "    TAME_DEBUG_SOURCE     equivalent to -Ln\n"
	  ;
    
  exit (1);
}

static str
ifn2ofn (const str &s)
{
    str::size_type l = s.length();
    if (l > 2 && s[l-2] == '.' && s[l-1] == 'T')
	return s.substr(0, l - 2) + ".C";
    else if (l > 3 && s[l-3] == '.' && s[l-2] == 't' && s[l-1] == 't')
	return s.substr(0, l - 3) + ".cc";
    else if (l > 4 && s[l-4] == '.' && s[l-3] == 't' && s[l-2] == 'c' && s[l-1] == 'c')
	return s.substr(0, l - 4) + ".cc";
    else
	return str();
}

static str
basename (const str &s)
{
    str::size_type lastslash = s.rfind('/');
    return (lastslash == str::npos ? s : s.substr(lastslash + 1));
}


int
main (int argc, char *argv[])
{
  FILE *ifh = NULL;
  int ch;
  str outfile;
  bool no_line_numbers = false;
  bool horiz_mode = true;
  str ifn;
  outputter_t *o;
  bool c_mode (false), b_mode (false);
  
  while ((ch = getopt (argc, argv, "bghnLvdo:c:O:")) != -1)
    switch (ch) {
      case 'g':
	tamer_debug = true;
	break;
    case 'h':
      usage ();
      break;
    case 'n':
      horiz_mode = false;
      break;
    case 'c':
      ifn = optarg;
      outfile = ifn2ofn(ifn);
      if (!outfile.length()) {
	warn << "-c expects an input file with the .T suffix\n";
	usage ();
      }
      c_mode = true;
      break;
    case 'b':
      b_mode = true;
      break;
    case 'L':
      no_line_numbers = true;
      break;
    case 'o':
      outfile = optarg;
      break;
    case 'v':
      warn  << "tamer\n"
	    << "compiled " __DATE__ " " __TIME__ "\n" ;
      exit (0);
      break;
      case 'O':
	break;
    default:
      usage ();
      break;
    }

  if (b_mode) {
    if (!c_mode) {
      warn << "-b only works when -c is specified\n";
      usage ();
    } else {
	outfile = basename(outfile);
	if (outfile.length() == 0) {
	    warn << "canont formulate an output file name\n";
	    usage ();
	}
    }
  }

  if (getenv ("TAME_DEBUG_SOURCE")) {
    no_line_numbers = true;
	horiz_mode = false;
  }

  if (getenv ("TAME_NO_LINE_NUMBERS"))
    no_line_numbers = true;

  if (getenv ("TAME_ADD_NEWLINES"))
    horiz_mode = false;

  argc -= optind;
  argv += optind;

  if (argc == 1) {
      if (ifn.length()) {
	  warn << "input filename double-specified!\n";
	  usage ();
      }
      ifn = argv[0];
  }

  if (ifn.length() && ifn != "-") {
    if (!(ifh = fopen (ifn.c_str (), "r"))) {
      warn << "cannot open file: " << ifn << "\n";
      usage ();
    }

    // the filename variable is local to scan.ll, which will need
    // it to output message messages. It defaults to '(stdin)'
    filename = ifn;
    
    yyin = ifh;
  }

  state = new parse_state_t ();

  state->set_infile_name (ifn);
  bool fl = (ifn.length() && ifn != "-" && !no_line_numbers);
  if (horiz_mode) {
    o = new outputter_H_t (ifn, outfile, fl);
  } else {
    o = new outputter_t (ifn, outfile, fl);
  }
  if (!o->init ())
    exit (1);

  // only on if YYDEBUG is on :(
  // yydebug = 1;

  yyparse ();

  if (ifh) {
    fclose (ifh);
  }

  state->output (o);

  // calls close on the outputter fd
  delete o;
}
