/* -*- mode: c++ -*- */
#include <tamer/config.h>
#include <tamer/fdh.hh>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>

#define TAMER_HELPER_PATH PACKAGE_BIN_DIR "/tamerfdh"
  //TODO any way to do this better? the explicit "/tamerfdh" looks bad

static char crapbuf[2048];

namespace tamer {

fdhelper::fdhimp::fdhimp()
    : _min(4), _max(6)
{
    for (int i = 0; i < _min; i++) {
	fdh *x = new fdh;
	if (x->ok()) {
	    _helpers.push_back(x);
	    _ready.push_back(x);
	} else
	    delete x;
    }
    _count = _ready.size();
    assert(_count > 0);
}

fdhelper::fdhimp::~fdhimp()
{
    while (_helpers.size()) {
	fdh *h = _helpers.front();
	_helpers.pop_front();
	delete h;
    }
}

tamed void fdhelper::fdhimp::get(event<fdh *> done)
{
    while (!_ready.size() || _waiting.size()) {
	twait {
	    _waiting.push_back(make_event());
	}
    }
    fdh *h = _ready.front();
    _ready.pop_front();
    done.trigger(h);
}


fdhelper::fdh::fdh()
{
    int socks[2];

    if (::socketpair(AF_UNIX, SOCK_STREAM, 0, socks) < 0)
	return;

    _pid = ::fork();
    if (_pid < 0) {
	::close(socks[0]);
	::close(socks[1]);
	return;
    } else if (_pid == 0) {
	::close(socks[0]);
	if (::dup2(socks[1], 0) < 0)
	    goto child_err;
	if (::execv(TAMER_HELPER_PATH, NULL) < 0)
	    goto child_err;
    child_err:
	::close(socks[1]);
	exit(0);
    }

    ::close(socks[1]);
    fd::make_nonblocking(socks[0]);
    _fd = fd(socks[0]);
}

tamed void fdhelper::fdh::recv(int *fd, size_t size, event<int> done)
{
    tvars {
	int amt;
    }

    while (done) {
	amt = ::fdh_recv(_fd.value(), fd, _u.buf, size);
	if (amt > 0)
	    break;
	else if (amt == 0)
	    continue;
	else if (errno == EAGAIN || errno == EWOULDBLOCK)
	    twait { tamer::at_fd_read(_fd.value(), make_event()); }
	else if (errno != EINTR) {
	    perror("fdh: open: recv");
	    done.trigger(-errno);
	    return;
	}
    }

    done.trigger(0);
}

tamed void fdhelper::fdhimp::open(std::string fname, int flags, mode_t mode, event<int> done)
{
    tvars {
	passive_ref_ptr<fdhimp> hold(this);
	fdh *h;
	int r, fresult;
    }

    twait { get(make_event(h)); }

    h->_u.msg.query.req = FDH_OPEN;
    h->_u.msg.query.flags = flags;
    h->_u.msg.query.mode = mode;
    strcpy(&h->_u.buf[FDH_MSG_SIZE], fname.c_str());

    twait {
	h->send(-1, FDH_MSG_SIZE + fname.length() + 1, make_event(r));
    }
    if (r < 0)
	goto release;
    twait {
	h->recv(&fresult, FDH_MSG_SIZE, make_event(r));
    }
    if (r >= 0 && h->_u.msg.reply.err)
	r = -h->_u.msg.reply.err;

 release:
    done.trigger(r >= 0 ? fresult : r);
    put(h);
}

tamed void fdhelper::fdhimp::fstat(int fd, struct stat &stat_out, event<int> done)
{
    tvars {
	passive_ref_ptr<fdhimp> hold(this);
	fdh *h;
	int r, fresult;
    }

    twait { get(make_event(h)); }

    h->_u.msg.query.req = FDH_STAT;
    twait {
	h->send(fd, FDH_MSG_SIZE, make_event(r));
    }
    if (r < 0)
	goto release;
    twait {
	h->recv(0, FDH_MSG_SIZE + sizeof(struct stat), make_event(r));
    }
    if (r >= 0 && h->_u.msg.reply.err)
	r = -h->_u.msg.reply.err;
    if (r >= 0)
	memcpy(&stat_out, &h->_u.buf[FDH_MSG_SIZE], sizeof(struct stat));

 release:
    done.trigger(r >= 0 ? 0 : r);
    put(h);
}

tamed void fdhelper::fdhimp::read(int read_fd, void *buf, size_t size, size_t &nread, event<int> done)
{
    tvars {
	passive_ref_ptr<fdhimp> hold(this);
	fdh *h;
	int r;
	size_t pos = 0;
	size_t amt;
    }

    nread = 0;
    twait { get(make_event(h)); }

    h->_u.msg.query.req = FDH_READ;
    h->_u.msg.query.size = size;
    twait {
	h->send(read_fd, FDH_MSG_SIZE, make_event(r));
    }
    if (r < 0) {
	done.trigger(r);
	goto release;
    }

    while (pos < size && h->_fd && done && r >= 0) {
	twait {
	    h->_fd.read_once(static_cast<char *>(buf) + pos, size - pos, amt, make_event(r));
	}
	pos += amt;
	nread = pos;
	if (amt == 0)
	    break;
    }

    done.trigger(r >= 0 ? 0 : r);

    // must read the rest of the file data lest the fd get out of sync
    twait {
	h->_fd.read(crapbuf, size - pos > sizeof(crapbuf) ? sizeof(crapbuf) : size - pos, make_event(r));
    }

 release:
    put(h);
}

tamed void fdhelper::fdhimp::write(int write_fd, const void *buf, size_t size, size_t &nwritten, event<int> done)
{
    tvars {
	passive_ref_ptr<fdhimp> hold(this);
	fdh *h;
	int r;
	size_t pos = 0;
	size_t amt;
    }

    nwritten = 0;
    twait { get(make_event(h)); }

    h->_u.msg.query.req = FDH_WRITE;
    h->_u.msg.query.size = size;
    twait {
	h->send(write_fd, FDH_MSG_SIZE, make_event(r));
    }
    if (r < 0) {
	done.trigger(r);
	goto release;
    }

    while (pos < size && h->_fd && done && r >= 0) {
	twait {
	    h->_fd.write_once(static_cast<const char *>(buf) + pos, size - pos, amt, make_event(r));
	}
	pos += amt;
	nwritten = pos;
	if (amt == 0)
	    break;
    }

    done.trigger(r >= 0 ? 0 : r);

    // must write the correct amount of data lest the fd get out of sync
    twait {
	h->_fd.write(crapbuf, size - pos > sizeof(crapbuf) ? sizeof(crapbuf) : size - pos, make_event(r));
    }

 release:
    put(h);
}

}
