#ifndef TAMER_AUTOCONF_H
#define TAMER_AUTOCONF_H 1
/* Copyright (c) 2012, Eddie Kohler
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, subject to the conditions
 * listed in the Tamer LICENSE file. These conditions include: you must
 * preserve this copyright notice, and you cannot mention the copyright
 * holders in advertising related to the Software without their permission.
 * The Software is provided WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED. This
 * notice is a summary of the Tamer LICENSE file; the license in that file is
 * legally binding.
 */

#if __cplusplus >= 201103L || __GXX_EXPERIMENTAL_CXX0X__
#ifndef TAMER_HAVE_CXX_CONSTEXPR
/* Define if the C++ compiler understands constexpr. */
#undef TAMER_HAVE_CXX_CONSTEXPR
#endif

#ifndef TAMER_HAVE_CXX_NOEXCEPT
/* Define if the C++ compiler understands noexcept. */
#undef TAMER_HAVE_CXX_NOEXCEPT
#endif

#ifndef TAMER_HAVE_CXX_RVALUE_REFERENCES
/* Define if the C++ compiler understands rvalue references. */
#undef TAMER_HAVE_CXX_RVALUE_REFERENCES
#endif

#ifndef TAMER_HAVE_CXX_STATIC_ASSERT
/* Define if the C++ compiler understands static_assert. */
#undef TAMER_HAVE_CXX_STATIC_ASSERT
#endif

#ifndef TAMER_HAVE_CXX_TEMPLATE_ALIAS
/* Define if the C++ compiler understands template alias. */
#undef TAMER_HAVE_CXX_TEMPLATE_ALIAS
#endif
#endif

#if TAMER_HAVE_CXX_NOEXCEPT
#define TAMER_NOEXCEPT noexcept
#else
#define TAMER_NOEXCEPT
#endif

#if TAMER_HAVE_CXX_RVALUE_REFERENCES
#define TAMER_MOVEARG(t) t &&
#define TAMER_MOVE(v) std::move(v)
#else
#define TAMER_MOVEARG(t) t
#define TAMER_MOVE(v) v
#endif

#if __GNUC__
#define TAMER_CLOSUREVARATTR __attribute__((unused))
#define TAMER_DEPRECATEDATTR __attribute__((deprecated))
#else
#define TAMER_CLOSUREVARATTR
#define TAMER_DEPRECATEDATTR
#endif

#if __GNUC__ && TAMER_DEBUG
#define TAMER_MAKE_ANNOTATED_EVENT(r, ...) make_annotated_event(__FILE__, __LINE__, r, ## __VA_ARGS__)
#define TAMER_MAKE_FN_ANNOTATED_EVENT(r, ...) make_annotated_event(__PRETTY_FUNCTION__, 0, r, ## __VA_ARGS__)
#elif TAMER_DEBUG
#define TAMER_MAKE_ANNOTATED_EVENT(r, ...) make_annotated_event(__FILE__, __LINE__, r, ## __VA_ARGS__)
#define TAMER_MAKE_FN_ANNOTATED_EVENT(r, ...) make_annotated_event(__FILE__, __LINE__, r, ## __VA_ARGS__)
#else
#define TAMER_MAKE_ANNOTATED_EVENT make_event
#define TAMER_MAKE_FN_ANNOTATED_EVENT make_event
#endif

#endif
