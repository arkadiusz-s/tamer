// -*- mode: c++ -*-
#include "config.h"
#include <tamer/dns.hh>
#include <fcntl.h>
#include <queue>

namespace tamer {

static ref_ptr<dns::resolver> r;

tamed void gethostbyaddr(struct in_addr *in, event<dns::reply> result) {
  if (!r)
    r = ref_ptr<dns::resolver>(new dns::resolver(DNS_OPTIONS_ALL));

  twait { r->ready(make_event()); }

  r->resolve_ptr(in, result);
}

tamed void gethostbyname(std::string name, bool search, event<dns::reply> result) {
  if (!r)
    r = ref_ptr<dns::resolver>(new dns::resolver(DNS_OPTIONS_ALL));

  twait { r->ready(make_event()); }

  r->resolve_a(name, search, result);
}

namespace dns {

reply_imp::reply_imp(ref_ptr<packet_imp> p)
  : err(0), trans_id(0xFFFF), ttl(0) {
  uint16_t flags, qdcount, ancount, nscount, arcount, qtype, qclass;
  uint32_t ttl_ = INT_MAX;
  unsigned int i;

  *p >> trans_id >> flags >> qdcount
     >> ancount >> nscount >> arcount;

  // is response?
  if (!(flags & 0x8000)) { err = -1; return; }

  // is error?
  if (flags & 0x020F) {
    if (flags & 0x0200) {
      err = DNS_ERR_TRUNCATED;
      /* if a truncation does not affect answers section
       * we pretend everything is dandy
       */
      if (nscount == 0 && arcount == 0)
        return;
    } else {
      uint16_t error_code = flags & 0x000F;
      err = (error_code > 5) ? DNS_ERR_UNKNOWN : error_code;
      return;
    }
  }

  // skip over questions
  for (i = 0; *p && i < qdcount; ++i) {
    if (skip_name(p)) { err = -1; return; }
    *p >> qtype >> qclass;
  }

  for (i = 0; *p && i < ancount; ++i) {
    uint16_t type, class_, rdlength;
    uint32_t ttl__;

    if (skip_name(p)) { err = -1; return; }
    *p >> type >> class_ >> ttl__ >> rdlength;

    if (type == TYPE_A && class_ == CLASS_INET) {
      if (ttl__ < ttl_) ttl_ = ttl__;
      struct in_addr addr;
      *p >> addr;
      addrs.push_back(addr.s_addr);
    } else if (type == TYPE_PTR && class_ == CLASS_INET) {
      std::ostringstream ss;
      uint8_t llen;

      if (ttl__ < ttl_) ttl_ = ttl__;
      *p >> llen;
      if (!llen)
        continue;
      while (*p) {
        std::string s;

        if ((llen & 0xC0) == 0xC0) { // pointer
          // XXX: ``Proof'' that this should not occur assuming no-adversaries/no-faults:
          // Since we do not support multiple questions per query (nor do all dns servers)
          // there can be at most one RR in the question segment; namely
          // our original PTR request which is the form X.X.X.X.in-addr.arpa.
          // Since 1) the suffix .arpa is reserved, 2) answers immediately follow
          // questions, 3) all pointers point to `prior' labels (RFC 1035 4.1.4)
          // 4) we only process the first PTR record (there can technically be more than
          // one PTR record, but it is generally *not* done and is highly discouraged):
          // there does not exist a label that the first RR in the answers segment
          // can utilize for compression. Thus, a pointer can not exist here.
          err = -1;
          return;
        } else if (llen > 63) {
          err = -1;
          goto done;
        } else { // label
          *p >> p->set_strlen(llen) >> s;
          ss << s;
        }
        *p >> llen;
        if (!llen) {
          name = ss.str();
          goto done;
        }
        ss << ".";
      }
    } else // skip
      *p += rdlength;
  }

done:
  // XXX this prevents caching truncated results by applications; is this safe?
  ttl = (err == DNS_ERR_TRUNCATED) ? 0 : ttl_;

  err = *p ? 0 : -1;
}

int request_imp::getpacket(packet &p, bool tcp) {
  if (_curr_name.size() > 255) return -1;

  p = make_packet(_curr_name.size() + 96 + 2 + 4 + 2);

  if (tcp) *p += sizeof(uint16_t);

  *p << _trans_id     << (uint16_t)0x0100
     << (uint16_t)0x1 << (uint16_t)0x0
     << (uint16_t)0x0 << (uint16_t)0x0;

  // dnsname to labels
  int pos = 0, n = 0;
  while ((n = _curr_name.find('.', pos)) >= 0) {
    n = n - pos;
    if (n > 63) return -1; // label too long
    *p << (uint8_t)n << _curr_name.substr(pos,n);
    pos += n + 1;
  }
  n = _curr_name.size() - pos;

  *p << (uint8_t)n   << _curr_name.substr(pos)
     << (uint8_t)0x0 << (uint16_t)_type
     << (uint16_t)CLASS_INET;

  if (tcp) {
    uint16_t size = p->size() - sizeof(uint16_t);
    p->reset();
    *p << size;
  }

  assert(*p);

  return 0;
}

void request_a::next(uint16_t trans_id) {
  if (_err)
    return;

  _trans_id = trans_id;
  _tx_count = 0;

  if (!_sent_raw &&
       (!_search || _ndots >= _s->ndots || (_search && _doms_it == _s->domains.end()))) {
    _sent_raw = true;
    _curr_name = _name;
  } else if (_search && _doms_it != _s->domains.end()) {
    _curr_name = (_name[_name.size()-1] == '.') ?
      _name + *(_doms_it++) : _name + '.' + *(_doms_it++);
    if (!check_name(_curr_name)) {
      next(trans_id);
      return;
    }
  } else {
    _err = -1;
    return;
  }
  _tx_count = 1;
}

void request_ptr::next(uint16_t trans_id) {
  if (_err)
    return;

  _trans_id = trans_id;
  _tx_count = 0;

  if (!_sent_raw)
    _sent_raw = true;
  else
    return;
  _tx_count = 1;
}

tamed void nameserver_imp::init(event<int> e) {
  tvars {
    struct in_addr addr;

    int i(); size_t n();
    uint8_t buf[512];
    passive_ref_ptr<nameserver_imp> hold(this);
  }

  assert(!_udp);
  addr.s_addr = _addr;

  twait { udp_connect(addr, _port, make_event(_udp)); }
  e.trigger(_udp.error());

  while (_udp) {
    twait { _udp.read_once(buf, 512, make_event(n, i)); }
    if (!_udp || (!n && !i))
      break;
    if (i) {
      continue;
    }
    received.push_back(make_reply(make_packet(buf, n)));
    if (ready)
      ready.trigger(1);
  }
}

tamed void nameserver_imp::query(packet p) {
  tvars { size_t n; int i; }

  if (!_udp)
    return;
  // we let timeouts take care of failed writes
  twait { _udp.write(p->getbuf(), p->size(), make_event(n, i)); }
}

tamed void nameserver_imp::init_tcp(event<int> e, timeval timeout) {
  tvars {
    struct in_addr addr;
    uint16_t len;
    size_t n; int i(), j();
    uint8_t buf[8192];
    passive_ref_ptr<nameserver_imp> hold(this);
  };

  assert(!_tcp);
  addr.s_addr = _addr;
  //TODO with_timeout doesn't actually set j to 0 as described in spec
  twait { tcp_connect(addr, _port, with_timeout(timeout, make_event(_tcp), j)); }
  e.trigger(_tcp.error());
  if (j)
    goto clean_up;

  while (_tcp && (_tcp_outbound || _tcp_outgoing.size())) {
    twait { _tcp.read((uint8_t *)&len, sizeof(len), add_timeout<1>(timeout, make_event(n, i), -ETIMEDOUT)); }
    len = htons(len);
    if (j || i || len > 8192 ) break;
    twait { _tcp.read(buf, len, add_timeout<1>(timeout, make_event(n, i), -ETIMEDOUT)); }
    if (j || i || len != n) break;
    received.push_back(make_reply(make_packet(buf, len)));
    _tcp_outbound--;
    if (ready) ready.trigger(1);
  }

// if there is a fault, timeouts in resolver will catch everything
clean_up:
  _tcp.close();
  _tcp_outbound = 0;
  _tcp_outgoing.clear();
}

tamed void nameserver_imp::query_tcp(packet p, timeval timeout) {
  tvars { size_t n; int i; packet k; }

  _tcp_outgoing.push_back(p);
  if (_tcp_outgoing.size() > 1)
    return;

  if (!_tcp) {
    twait { init_tcp(make_event(i), timeout); }
    if (i)
      return;
  }

  while (_tcp && _tcp_outgoing.size()) {
    k = _tcp_outgoing.front();
    twait { _tcp.write(k->getbuf(), k->size(), make_event(n, i)); }
    if (!i)
      _tcp_outbound++;
    _tcp_outgoing.pop_front();
  }
}

tamed void resolver::parse_loop() {
  tvars { rendezvous<> r; }
  
  for (;;) {
    parse();
    with_timeout_sec(DNS_REPARSE_TIME, _reparse = make_event(r));
    twait(r);
  }
}

tamed void resolver::add_nameservers(nameservers nss, event<> e) {
  tvars {
    int i();
    nameservers resnss, fresnss, oldnss;
    nameservers::iterator nssi, fn;
  }
  
  /* nss = {new (possibly overlapping) nameservers from resolv.conf}
   * oldnss = (_nameservers \cup _failed) \setminus nss
   * resness = nss \cap _nameservers
   * fresness = nss \cap _failed 
   */
  
  oldnss = _nameservers;
  oldnss.insert(_failed.begin(), _failed.end());
  for (nssi = nss.begin(); nssi != nss.end(); nssi++) {
    if ((fn = _nameservers.find(*nssi)) != _nameservers.end()) {
      resnss.insert(*fn);
      assert(oldnss.erase(*fn));
    } else if ((fn = _failed.find(*nssi)) != _failed.end()) {
      fresnss.insert(*fn);
      assert(oldnss.erase(*fn));
    } else { // new nameserver
      assert(!**nssi);
      twait { (*nssi)->init(make_event(i)); }
      if (!i) {
        resnss.insert(*nssi);
        handle_nameserver(*nssi);
      }
    }
  }
  
  for (nssi = oldnss.begin(); nssi != oldnss.end(); nssi++) {
    if ((*nssi)->ready)
      (*nssi)->ready.trigger(-1); // kill old nameservers
  }

  _nameservers = resnss;
  _nsindex = _nameservers.begin();
  _failed = fresnss;
  
  e.trigger();
}

tamed void resolver::handle_nameserver(nameserver ns) {
  tvars {
    int i();
    reply p;
    rendezvous<> r;
    std::map<uint16_t, query>::iterator reqit;
  }

  assert(!ns->ready);

  for (;;) {
    twait { ns->ready = make_event(i); }
    if (i > 0) // replies waiting
      while (ns->received.size()) {
        p = ns->received.front();
        ns->received.pop_front();
        if ((reqit = _requests.find(p->trans_id)) != _requests.end()) {
          reqit->second.p.trigger(p);
          _requests.erase(reqit);
        }
      }
    else //either `failed' or removed/destroyed
      break;
  }
}

tamed void resolver::failed_nameserver(nameserver n) {
  const static request q = make_request_a("www.google.com");
  tvars {
    int i, timewait(3);
    std::set<nameserver, nameserver_comp>::iterator it;
    rendezvous<bool> r;
    packet p;
    bool timeout;
    passive_ref_ptr<resolver> hold(this);
  }

  if ((it = _nameservers.find(n)) == _nameservers.end()
       || ++n->timeouts < _max_timeouts)
    return;

  _nameservers.erase(it);
  _failed.insert(n);

  n->ready.trigger(0);
  n->ready = make_event(r, false, i);
  q->next(get_trans_id());
  for(;;) {
    if (_reparse)
      _reparse.trigger();
    // exponential back-off
    twait { at_delay_sec(timewait *= 1, make_event()); }
    assert(!q->getpacket(p));
    at_delay(_timeout, make_event(r, true));
    n->query(p);
    twait(r, timeout);
    if (i == -1) {// full_release
      _failed.erase(n);
      break;
    } else if (timeout) {
      q->reissue(get_trans_id());
      continue;
    } else if (p) {
      r.clear();
      n->timeouts = 0;
      handle_nameserver(n);
      _failed.erase(n);
      _nameservers.insert(n);
      break;
    }
  }
}

tamed void resolver::ready(event<> e) {
  if (!_is_init)
    twait { _init = (_init)
      ? tamer::all(_init, make_event())
      : make_event(); }
  e.trigger();
}

tamed void resolver::resolve(request q, event<reply> e) {
  static std::queue<event<> > l;
  tvars {
    bool timeout;
    rendezvous<bool> r;
    query u;
    reply p;
    packet k;
    bool tcp(false);
    nameserver ns;
  }

  if (!*this || !_nameservers.size()) {
    e.trigger(reply());
    return;
  }

  // windowing
  if (_reqs_inflight > _max_reqs_inflight)
    twait { l.push(make_event()); }
  _reqs_inflight++;

  // send loop
  q->next(get_trans_id());
  ns = next_nameserver();
  while (e) {
    // this can happen with long queries
    if (!*q) {
      e.trigger(reply());
      break;
    }

    // register query into map
    u = query(q, make_event(r, false, p));
    _requests[u] = u;

    // send and set timeout
    assert(!q->getpacket(k, tcp));
    if (tcp) ns->query_tcp(k, _timeout);
    else ns->query(k);
    at_delay(_timeout, make_event(r, true));

    // wait for timeout or response
    twait(r, timeout);
    r.clear();

    // process response
    if (timeout) {
      failed_nameserver(ns);
      _requests.erase(u);
      if (_nameservers.size() && q->tx_count() < _max_retransmits) {
        ns = next_nameserver();
        q->reissue(get_trans_id());
        continue;
      } else if (e) {
        e.trigger(reply());
        break;
      }
    } else {
      if (!p) {
        e.trigger(reply());
        break;
      }
      switch (p->err) {
        /* XXX: is it possible to get DNS_ERR_TRUNC
         * from a server that does not
         * implement TCP?
         */
        case DNS_ERR_FORMAT:
        /* This should not happen, but adding an assert
         * would introduce a vulnerability */
          //printf("dns format error\n");
        case DNS_ERR_NOTEXIST:
          if (q->hasnext()) {
            q->next(get_trans_id());
            continue;
          }
          /* no break */
        case DNS_ERR_NONE:
          if (e)
            e.trigger(p);
          break;
        case DNS_ERR_TRUNCATED:
          if (tcp) { // if we get trunc on tcp then abort
            if (e)
              e.trigger(reply());
            // this breaks the switch but, the while above
            // will catch the !e
            break; 
          }
          q->reissue(get_trans_id());
          tcp = true;
          continue;
        case DNS_ERR_UNKNOWN:
        case DNS_ERR_SERVERFAILED:
        case DNS_ERR_NOTIMPL:
        case DNS_ERR_REFUSED:
          if (q->tx_count() < _max_retransmits)
            q->reissue(get_trans_id());
          else if (e)
            e.trigger(reply());
          break;
        default:
          /* This can not happen */
          assert(false);
          break;
      }
    }
    tcp = false;
    ns = next_nameserver();
  }

  // windowing
  _reqs_inflight--;
  if (l.size()) {
    l.front().trigger();
    l.pop();
  }
}

uint16_t resolver::get_trans_id() {
  uint16_t trans_id;

  for(;;){
#if RAND_MAX < 0xFFFF
   /* Posix only guarantees 0x7FFF: we do two calls instead of
    * one since this would leak information about the client (i.e. the
    * use of tamer) */
    trans_id = (rand() << 1 & 0xFF00 | rand() >> 7 & 0xFF) & 0xFFFF;
#else
    // old rands have bad lower order bits, but whatever, man
    trans_id = rand() & 0xFFFF;
#endif
    if (trans_id == 0xFFFF) continue;
    if (_requests.find(trans_id) == _requests.end()) return trans_id;
  }

  /* --old version--
    struct timeval tv;
    for(;;){
    gettimeofday(&tv, NULL);
    trans_id = tv.tv_usec & 0xffff;

    if (trans_id == 0xffff) continue;
    if (_requests.find(trans_id) != _requests.end()) return trans_id;
  }*/

  return 0xffff;
}

void resolver::set_default(event<> e) {
  struct in_addr ina;
  nameservers nss;

  set_default_options();
  _search_list = make_search_list(_ndots);
  if (_flags & DNS_OPTION_SEARCH)
    set_from_hostname();
  _nameservers.clear();
  if (_flags & DNS_OPTION_NAMESERVERS && inet_aton("127.0.0.1", &ina)){ 
    nss.insert(make_nameserver(ina.s_addr));
    add_nameservers(nss, e); 
  }
}

tamed void resolver::parse() {
  char *curr, *next = NULL, *tok;
  static const char * const delims = " \t";
  tvars {
    fd fin;
    int i;
    char * buf;
    size_t size;
    struct stat fst;
    struct in_addr ina;
    nameservers nss;
  }

  twait { fd::open(_rcname.c_str(), O_RDONLY, 0, make_event(fin)); }

  if (!fin) {
    twait { set_default(make_event()); }
    return;
  }

  twait { fin.fstat(fst, make_event(i)); }

  if (i < 0) { //XXX this seems unlikely aside from ENOMEM, assert?
    _err = 2;
    goto out1;
  }

  if (fst.st_ino == _fst.st_ino || fst.st_mtime == _fst.st_mtime)
    goto out1;

  _fst = fst;

  if (!fst.st_size) {
    twait { set_default(make_event()); }
    goto out1;
  }

  // corrupted resolv.conf?
  if (fst.st_size > 65535) {
    _err = 3;
    goto out1;
  }

  buf = new char[fst.st_size + 1];

  twait { fin.read(buf, fst.st_size, make_event(size, i)); }

  // read error or file was modified between stat and read
  if (i < 0 || (size_t)fst.st_size != size) {
    _err = 5;
    goto out2;
  }

  buf[fst.st_size] = 0;

  set_default_options();

  curr = buf;
  do {
    next = next_line(curr);
    if (!(tok = strtok(curr, delims)) || *tok == '#' || *tok == ';')
      continue;

    if (!strcmp(tok, "nameserver") && (_flags & DNS_OPTION_NAMESERVERS)
        && inet_aton(strtok(NULL, delims), &ina)) {
      nss.insert(make_nameserver(ina.s_addr));
      //printf("ns: %s\n", inet_ntoa(ina));
    } else if (!strcmp(tok, "domain") && (_flags & DNS_OPTION_SEARCH)) {
      tok = strtok(NULL, delims);
      if (!tok)
        continue;
      _search_list = make_search_list(_ndots);
      add_domain(tok);

    } else if (!strcmp(tok, "search") && (_flags & DNS_OPTION_SEARCH)) {
      tok = strtok(NULL, delims);
      if (!tok)
        continue;
      _search_list = make_search_list(_ndots);
      do { add_domain(tok);
      } while ((tok = strtok(NULL, delims)));

    } else if (!strcmp(tok, "options")) {
        while ((tok = strtok(NULL, delims)))
          set_option(tok);
    }
  } while ((curr = next));

  if (!_search_list && _flags & DNS_OPTION_SEARCH)
    set_from_hostname();

  if (!nss.size() && _flags & DNS_OPTION_NAMESERVERS && inet_aton("127.0.0.1", &ina))
    nss.insert(make_nameserver(ina.s_addr));

  twait { add_nameservers(nss, make_event()); }

out2:
  delete [] buf;
out1:
  fin.close();

  // wake up any waiting queries
  if (_init)
    _init.trigger();
  _is_init = true;
}

void resolver::set_option(const char * option) {
  const char * val = strchr(option, ':');
  if (!val || !*val)
    return;

  if (!strncmp(option, "ndots", 6)) {
    const int ndots = strtoint(val, 0, host_name_max);
    if (ndots == -1) return;
    if (!(_flags & DNS_OPTION_SEARCH)) return;
    _search_list->ndots = _ndots = ndots;
  } else if (!strncmp(option, "timeout:", 8)) {
    const int timeout = strtoint(val, 1, 3600);
    if (timeout == -1) return;
    if (!(_flags & DNS_OPTION_MISC)) return;
    _timeout.tv_sec = timeout;
  } else if (!strncmp(option, "max-timeouts:", 12)) {
    const int max_timeouts = strtoint(val, 1, 255);
    if (max_timeouts == -1) return;
    if (!(_flags & DNS_OPTION_MISC)) return;
    _max_timeouts = max_timeouts;
  } else if (!strncmp(option, "max-inflight:", 13)) {
    const int maxinflight = strtoint(val, 1, 65000);
    if (maxinflight == -1) return;
    if (!(_flags & DNS_OPTION_MISC)) return;
    _max_reqs_inflight = maxinflight;
  } else if (!strncmp(option, "attempts:", 9)) {
    const int retries = strtoint(val, 1, 255);
    if (retries == -1) return;
    if (!(_flags & DNS_OPTION_MISC)) return;
    _max_retransmits = retries;
  }
}

}}
