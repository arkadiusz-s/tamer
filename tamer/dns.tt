// -*- mode: c++ -*-
#include <tamer/dns.hh>
#include <sys/select.h>
#include <sys/ioctl.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <signal.h>
#include <errno.h>
#include <tamer/tamer.hh>
#include <tamer/fd.hh>
#include <arpa/inet.h>
#include <map>
#include <list>

namespace tamer {

void gethostbyname(std::string name, int flags, event<dns::reply> result) {
  if (!resolver)
    resolver = dns::resolver(DNS_OPTIONS_ALL);
  
  resolver.resolve_ipv4(name, flags, result);
}

namespace dns {

int reply::process(uint8_t * buf, int len) {
  char tmp_name[256];

  off_t off = 0;
  uint16_t flags, questions, answers, authority, additional, datalength;
  uint32_t ttl, ttl_r = 0xffffffff;
  unsigned int i;

  get16(buf, len, off, _p->trans_id);
  get16(buf, len, off, flags);
  get16(buf, len, off, questions);
  get16(buf, len, off, answers);
  get16(buf, len, off, authority);
  if (get16(buf, len, off, additional)) return -1;

  if (!(flags & 0x8000)) return -1;
  
  if (flags & 0x020f) {
    if (flags & 0x0200)
      return DNS_ERR_TRUNCATED;
    else {
      uint16_t error_code = (flags & 0x000f) - 1;
      if (error_code > 5)
        return DNS_ERR_UNKNOWN;
      else
        return error_code; 
    }
  }

  for (i = 0; i < questions; ++i) {
    tmp_name[0] = '\0';
    if (name_parse(buf, len, off, tmp_name, sizeof(tmp_name)) < 0) return -1;
    off += 4;
    if (off >= len) return -1;
  }

  for (i = 0; i < answers; ++i) {
    uint16_t type, class_;

    if (name_parse(buf, len, off, tmp_name, sizeof(tmp_name)) < 0) return -1;

    get16(buf, len, off, type);
    get16(buf, len, off, class_);
    get32(buf, len, off, ttl);

    if (get16(buf, len, off, datalength)) return -1;

    if (type == TYPE_A && class_ == CLASS_INET) {
      int addrcount;

      _p->type = TYPE_A;
      if ((datalength & 3) != 0) return -1;

      addrcount = datalength >> 2;
      ttl_r = min(ttl_r, ttl);

      if (off + 4*addrcount > len) return -1;
      
      for (int j = 0; j < addrcount; j++) {
        _p->addrs.push_back(*((uint32_t *) (buf + off)));
        off += 4;
      }

      _p->have_answer = 1;
/*    } else if (type == TYPE_PTR && class == CLASS_INET) {
      if (req->request_type != TYPE_PTR) {
        j += datalength; continue;
      }
      if (name_parse(packet, length, &j, reply.data.ptr.name,
               sizeof(reply.data.ptr.name))<0)
        return -1;
      ttl_r = MIN(ttl_r, ttl);
      reply.have_answer = 1;
      break;*/
    } else
      off += datalength;
  }
  _p->ttl = ttl_r;

  return DNS_ERR_NONE;
}

int reply::name_parse(uint8_t * buf, int len, off_t &off, 
    char * name, size_t size) const{
  int name_end = -1;
  int ptr_count = 0;
  off_t j = off;

  char * cp = name;
  const char * const end = name + size;

  for(;;) {
    uint8_t label_len = 0;
    if (j >= len) return -1;
    if (get8(buf, len, j, label_len)) return -1;
    if (!label_len) break;
    if (label_len & 0xc0) {
      uint8_t ptr_low = 0;
      if (get8(buf, len, j, ptr_low)) return -1;
        if (name_end < 0) name_end = j;
        j = (((int)label_len & 0x3f) << 8) + ptr_low;
        if (j < 0 || j >= len) return -1;
        if (++ptr_count > len) return -1;
        continue;
    }
    if (label_len > 63) return -1;
    if (cp != name) {
      if (cp + 1 >= end) return -1;
        *cp++ = '.';
    }
    if (cp + label_len >= end) return -1;
    memcpy(cp, buf + j, label_len);
    cp += label_len;
    j += label_len;
  }
  if (cp >= end) return -1;
  *cp = '\0';
  if (name_end < 0)
      off = j;
  else
      off = name_end;
  
  return 0;
}

std::string search::next() {
  std::string ndom;

  if (!*this)
    return std::string();
  
  ndom = _b->_dom;
  
  if (!_b->_sent_raw && (!_b->_is_search || (_b->_ndots >= _s->_ndots) || 
        _b->_it == _s->_doms.end())) {
    _b->_sent_raw = 1;
    return _b->_dom;
  }

  if (_b->_dom[_b->_dom.size()-1] != '.')
    ndom += '.';
  
  ndom += *_b->_it;
  _b->_it++;

  return ndom;
}

search search::new_search(std::string dom, int flags) {
  search sr = search(*this);

  if (!_s)
    return sr;
  sr._b = new base(dom, _s->_doms.begin(), flags);

  return sr; 
}

request request::next_search_request(uint16_t trans_id) {
  request o;

  if (!this || !_q->s)
    return o;

  o._q = new request_state(_q->type, trans_id, _q->s);
  
  if (o._q && *o._q)
    o.build();

  return o; 
}

request &request::reissue(uint16_t trans_id) {
  uint16_t x;

  if (!*this)
    return *this;

  _q->trans_id = trans_id;
  x = htons(trans_id);
  memcpy(_q->req, &x, 2);

  return *this;
}

void request::send(fd socket, int conn, event<int> result) {
  int x = conn ? 0 : 2;
  _q->tx_count_++;
  socket.write(_q->req + x, _q->offset - x, result);
}

void request::build() {
  off_t offset = 0;
  memset(_q->req, 0, _q->max_len); 
  
  append16(_q->req, _q->max_len, _q->offset, _q->trans_id);
  append16(_q->req, _q->max_len, _q->offset, 0x0100);
  append16(_q->req, _q->max_len, _q->offset, 1);
  append16(_q->req, _q->max_len, _q->offset, 0);
  append16(_q->req, _q->max_len, _q->offset, 0);

  if ((_q->err = append16(_q->req, _q->max_len, _q->offset, 0)))
    return;

  if ((_q->err = dnsname_to_labels(_q->_name.c_str(), _q->name_len)))
    return;

  append16(_q->req, _q->max_len, _q->offset, _q->type);
  _q->err = append16(_q->req, _q->max_len, _q->offset, CLASS_INET);
  append16(_q->req, _q->max_len, offset, (uint16_t)(_q->offset - 2));
}


int request::dnsname_to_labels(const char *name, const int name_len){
  const char *end = name + name_len;

  if (name_len > 255)
    return -2;
  
  for (;;) {
    const char *const start = name;
    name = strchr(name, '.');
    if (!name) {
      const unsigned int label_len = end - start;
      if (label_len > 63) return -1;
      if ((size_t)(_q->offset+label_len+1) > _q->max_len) return -2;
      _q->req[_q->offset++] = label_len;

      memcpy(_q->req + _q->offset, start, end - start);
      _q->offset += end - start;
      
      break;
    } else {
      const unsigned int label_len = name - start;
      if (label_len > 63) return -1;
      if ((size_t)(_q->offset+label_len+1) > _q->max_len) return -2;
      _q->req[_q->offset++] = label_len;

      memcpy(_q->req + _q->offset, start, name - start);
      _q->offset += name - start;
      name++;
    }
  }

  if (!_q->offset || _q->req[_q->offset-1]) _q->req[_q->offset++] = 0;

  return 0;
}

tamed void nameserver::nameserver_state::query(request q, event<int, reply> e) {
  printf("query\n");
  //should there be e.at_trigger(dont care about result)?
  _reqs.push_back(q);
  _events[q.trans_id()] = e;
  _pump.trigger();
}

tamed void nameserver::nameserver_state::loop(bool tcp, event<int> e) {
  enum query { KILL, SEND, RECV, TRIGGER };
  tvars {
    rendezvous<> z; 
    rendezvous<int, request> r;
    bool alive;
    int i(), issent(), istimeout(); 
    tamer::fd socket, socket_; struct in_addr addr;
    uint8_t packet[1500]; size_t size;
    uint16_t size_; off_t off;
    reply p; request q;
    std::map<uint16_t, event<int, reply> >::iterator it;
    passive_ref_ptr<nameserver_state> hold(this);
    event<> _pump_;
  }

  addr.s_addr = _addr;
  e.at_trigger(make_event(z));
  if (tcp)
    fdx::tcp_connect(addr, _port, make_event(z, socket));
  else
    fdx::udp_connect(addr, _port, make_event(z, socket));
  twait(z);
  
  if (!e)
    return;
  e.trigger(socket.error());
  
  alive = true;
  _pump = make_event(r, (int)SEND, request());
  _kill = make_event(r, (int)KILL, request());
 
  while (alive || r.nevents()) {
    twait(r, i, q);
    switch (i) {
      case KILL:
        r.clear();
        for (it = _events.begin(); it != _events.end(); it++)
          it->second.trigger(-ECANCELED, reply());
        return;
      case SEND:
        if (!alive)
          // we cannot make new events
          // (i.e.) handle previous events, die gracefully
          break;
        while (_reqs.size()) {
          _reqs.front().send(socket, tcp,
              make_event(r, (int)RECV, _reqs.front(), issent));
          _reqs.pop_front();
        }
        _pump = make_event(r, (int)SEND, request());
        break;
      case RECV:
        if (issent) {
          _events[q.trans_id()].trigger(-EBADF, reply());
          _events.erase(q.trans_id());
        } else
          socket.read_once(packet, 1500, size, 
              with_timeout(_timeout,
                make_event(r, (int)TRIGGER, q, i), istimeout));
        break;
      case TRIGGER:
        off = 0;
        size_ = size;
        do {
          //build reply
          if (tcp)
            get16(packet, size, off, size_);
          p = reply(packet + off, size_);
          off += size_;
          //handle reply
          if (istimeout) {
            _timeouts++;
            _events[q.trans_id()].trigger(-ETIMEDOUT, reply());
            _events.erase(q.trans_id());
          } else if (!tcp && p.error() == DNS_ERR_TRUNCATED) {
            alive = false;
            _pump_ = _pump;
            twait{ loop(true, make_event(i)); }
            if (i) {
              _events[q.trans_id()].trigger(0, p);
              _events.erase(q.trans_id());
              _pump = _pump_;
            } else {
              // push to the front of the queue
              // and try with new shiny tcp connection
              _reqs.push_front(q);
              // if you have a better way of 
              // clearing 'pump' without calling
              // r.clear() (doing so would result in 
              // an ungraceful death) let me know as
              // it would remove the need for 
              // 'bool alive'
              _pump_.trigger();
            }
            _pump.trigger();
          } else {
            _timeouts = 0;
            _events[q.trans_id()].trigger(0, p);
            _events.erase(q.trans_id());
          }
        } while (tcp && (size_t)off < size);
        break;
    }
  }
}

/*
tamed void nameserver::nameserver_state::probe(event<> e) {
  tvars { int i (), j(); reply p;
      passive_ref_ptr<nameserver_state> hold(this);
  }
  static search s(1);
  const static search n = s.new_search("www.google.com", DNS_QUERY_NO_SEARCH);
  static request q(TYPE_A, 0x0000, n);

  const static int tvals[] = {10, 60, 300, 900, 3600};
  
  while (!*this) {
    if (_conn == DNS_QUERY_UDP)
      twait { loop_tcp(make_event()); }
    else {
      twait { loop_udp(make_event()); }
      i++;
    }

    if (!*this) continue; 
    
    twait { query(q.reissue(tvals[i]), tvals[i], make_event(j, p)); }
    
    if (!j || !p) continue;
    if (i == 5) break;
  }

  e.trigger();
}
*/

tamed void resolver::resolver_state::parse_loop() {
  tvars { rendezvous<> r; }

  for (;;) {
    parse(make_event(r));
    twait(r);
    pump();
    at_delay_sec(DNS_REPARSE_TIME, make_event(r)); 
    twait(r);
  }
}

tamed void resolver::resolver_state::pump() {
  tvars { 
    int i(); reply p; request q;
    rendezvous<request,nameserver> r; 
    nameserver ns; 
  }

  if (r.nevents() || !nameservers.size()) return;
  
  while (waiting.size() || reqs_inflight) {
    if (waiting.size() && reqs_inflight < max_reqs_inflight) {
      if (nsindex == nameservers.end())
        nsindex = nameservers.begin();
      q = waiting.front();
      ns = *nsindex;
      ns.query(q, make_event(r, q, ns, i, p));
      waiting.pop_front();
      reqs_inflight++;
      nsindex++;
    } else {
      twait(r, q, ns); 
      switch (i) {
        case 0:
          switch (p.error()) {
            // TODO is it possible to get DNS_ERR_TRUNC
            // from a server that does not 
            // implement TCP?
            case DNS_ERR_NONE:
              pop(p);
              break;
              //break;
            case DNS_ERR_SERVERFAILED:
            case DNS_ERR_NOTIMPL:
            case DNS_ERR_REFUSED:
              failed(ns);
              reissue(q);
              break;
            default:
              next(q);
          }
          break;
        case -EBADF:
          failed(ns);
          reissue(q);
          break;
        case -ETIMEDOUT:
          if (ns.timeouts() > max_timeouts)
            failed(ns);
          reissue(q);
          break;
        case -ECANCELED:
        default:
          pop(q);
          break;
        }
      reqs_inflight--; 
    }
  }
}

void resolver::resolver_state::push(request q, event<reply> e) {
  requests[q.trans_id()] = e;
  waiting.push_back(q);
}

void resolver::resolver_state::pop(request q) {
  event<reply> e;
  if (!(e = requests[q.trans_id()])) return;
  e.trigger(reply());
  requests.erase(q.trans_id());
}

void resolver::resolver_state::pop(reply p) {
  event<reply> e;
  if (!(e = requests[p.trans_id()])) return;
  e.trigger(p);
  requests.erase(p.trans_id()); 
}

void resolver::resolver_state::reissue(request q) {
  if (q.tx_count() < max_retransmits) {
    push(q.reissue(get_trans_id()), requests[q.trans_id()]);
    requests.erase(q.trans_id());
  } else
    pop(q);
}

void resolver::resolver_state::next(request q) {
  request o;

  if ((o = q.next_search_request(get_trans_id()))) {
    push(o, requests[q.trans_id()]);
    requests.erase(q.trans_id());
  } else
    pop(q);
}

tamed void resolver::resolver_state::resolve_ipv4(std::string name, 
    int flags, event<reply> e) {
  tvars { request q; reply p; }
  
  q = request(TYPE_A, get_trans_id(), global_search.new_search(name, flags));
  if (!q) { e.trigger(reply()); return; }
  
  push(q, e); 
  pump();
}

tamed void resolver::resolver_state::failed(nameserver ns) {
  nameservers.remove(ns);
  nameservers_failed.push_back(ns);

  //twait { ns.probe(make_event()); }
  
  nameservers_failed.remove(ns);

  if (ns)
    nameservers.push_back(ns);
}

uint16_t resolver::resolver_state::get_trans_id() {
  struct timeval tv;
  uint16_t trans_id;
  
  for(;;){
    gettimeofday(&tv, NULL);
    trans_id = tv.tv_usec & 0xffff;
    
    if (trans_id == 0xffff) continue;
    if (!requests[trans_id]) return trans_id;
  }

  return 0xffff;
}

tamed void resolver::resolver_state::parse(event<> e) {
  char *curr, *next = NULL, *tok;
  static const char *const delims = " \t";
  tvars { fd fin; int i; char * buf; size_t size; struct stat nfst;
          std::list<nameserver>::iterator t; std::list<nameserver> nss; }
  
  twait { fd::open(rcname.c_str(), O_RDONLY, 0, make_event(fin)); }
  
  if (!fin) {
    set_default_options();
    clr_domains();
    set_from_hostname();
    if (flags & DNS_OPTION_NAMESERVERS)
      twait { add_nameserver("127.0.0.1", nss, make_event()); }
    e.trigger();
    return;
  }
  
  twait { fin.fstat(nfst, make_event(i)); }
  
  if (i < 0) {
    err = 2;
    goto out1;
  } 

  if (nfst.st_ino == fst.st_ino ||
      nfst.st_mtime == fst.st_mtime) {
    goto out1;
  }

  fst = nfst;

  if (!nfst.st_size) {
    set_default_options();
    clr_domains();
    set_from_hostname();
    if (flags & DNS_OPTION_NAMESERVERS)
      twait { add_nameserver("127.0.0.1", nss, make_event()); }
    goto out1;
  }

  if (nfst.st_size > 65535) {
    err = 3;
    goto out1;
  }
  
  buf = new char[nfst.st_size + 1];
 
  twait {
    fin.read(buf, nfst.st_size, size, make_event(i));
  } 

  if (i < 0 || (size_t)nfst.st_size != size) {
    err = 5;
    goto out2;
  }

  buf[nfst.st_size] = 0;

  set_default_options();
  clr_domains();

  curr = buf;
  do {
    next = next_line(curr);
    if (!(tok = strtok(curr, delims)) || *tok == '#' || *tok == ';')
      continue;

    if (!strcmp(tok, "nameserver") && (flags & DNS_OPTION_NAMESERVERS)) {
      twait { add_nameserver(strtok(NULL, delims), nss, make_event()); }
    
    } else if (!strcmp(tok, "domain") && (flags & DNS_OPTION_SEARCH)) {
      tok = strtok(NULL, delims);
      if (!tok)
        continue;
      clr_domains();
      add_domain(tok);
    
    } else if (!strcmp(tok, "search") && (flags & DNS_OPTION_SEARCH)) {
      tok = strtok(NULL, delims);
      if (!tok)
        continue;
      clr_domains();
      do {
         add_domain(tok);
      } while ((tok = strtok(NULL, delims)));
     
    } else if (!strcmp(tok, "options")) {
       while ((tok = strtok(NULL, delims)))
        set_option(tok);
     }
  } while ((curr = next));

  if (!global_search && flags & DNS_OPTION_NAMESERVERS)
    set_from_hostname();
  
  if (!nss.size() && flags & DNS_OPTION_SEARCH)
    twait { add_nameserver("127.0.0.1", nss, make_event()); }
  
  nameservers = nss;
  nsindex = nameservers.begin();
 
out2:
  delete [] buf;
out1:
  fin.close();
  e.trigger();
}

tamed void resolver::resolver_state::add_nameserver(const char * str_addr, std::list<nameserver> &nss, event<> e) {
  tvars { nameserver ns; std::list<nameserver>::iterator i; int j; } 
  struct in_addr ina;
 
  if (!inet_aton(str_addr, &ina)) goto out;
 
  for (i = nameservers.begin(); i != nameservers.end(); i++)
    if (*i == ina.s_addr) { 
      nss.push_back(*i); 
      i->set_timeout(timeout);
      goto out; 
    }
  
  for (i = nameservers_failed.begin(); 
      i != nameservers_failed.end(); i++)
    if (*i == ina.s_addr)  goto out;
  
  twait { ns = nameserver(ina.s_addr, 53, timeout, make_event(j)); }
  
  if (ns)
    nss.push_back(ns);
  else
    failed(ns); 
out:
   e.trigger();
}

void resolver::resolver_state::set_option(const char * option) {
  const char * val = strchr(option, ':');
  if (!val || !*val)
    return;

  if (!strncmp(option, "ndots", 6)) {
    const int ndots_ = strtoint(val, 0, HOST_NAME_MAX);
    if (ndots_ == -1) return;
    if (!(flags & DNS_OPTION_SEARCH)) return;
    global_search.set_ndots(ndots = ndots_);
  } else if (!strncmp(option, "timeout:", 8)) {
    const int timeout_ = strtoint(val, 1, 3600);
    if (timeout_ == -1) return;
    if (!(flags & DNS_OPTION_MISC)) return;
      timeout.tv_sec = timeout_;
  } else if (!strncmp(option, "max-timeouts:", 12)) {
    const int max_timeouts_ = strtoint(val, 1, 255);
    if (max_timeouts_ == -1) return;
    if (!(flags & DNS_OPTION_MISC)) return;
    max_timeouts = max_timeouts_;
  } else if (!strncmp(option, "max-inflight:", 13)) {
    const int maxinflight = strtoint(val, 1, 65000);
    if (maxinflight == -1) return;
    if (!(flags & DNS_OPTION_MISC)) return;
    max_reqs_inflight = maxinflight;
  } else if (!strncmp(option, "attempts:", 9)) {
    int retries = strtoint(val, 1, 255);
    if (retries == -1) return;
    if (!(flags & DNS_OPTION_MISC)) return;
    max_retransmits = retries;
  }
}

}}
