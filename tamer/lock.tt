// -*- mode: c++; related-file-name: "lock.hh" -*-
/* Copyright (c) 2007-2012, Eddie Kohler
 * Copyright (c) 2007, Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, subject to the conditions
 * listed in the Tamer LICENSE file. These conditions include: you must
 * preserve this copyright notice, and you cannot mention the copyright
 * holders in advertising related to the Software without their permission.
 * The Software is provided WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED. This
 * notice is a summary of the Tamer LICENSE file; the license in that file is
 * legally binding.
 */
#include <tamer/lock.hh>
#include <tamer/adapter.hh>
namespace tamer {

tamed void mutex::acquire(int shared, event<> done)
{
    tvars {
	rendezvous<> r;
	wait w;
    }

    if (!done)
	return;
    if (_wait.empty() && (shared > 0 ? _locked != -1 : _locked == 0)) {
	_locked += shared;
	done.trigger();
	return;
    }

    done.at_trigger(make_event(r));
    w.e = make_event(r);
    _wait.push_back(&w);

    while (1) {
	twait(r);
	if (!done) {
	    // canceling an exclusive lock may let a shared lock through,
	    // so always count canceled locks as shared
	    shared = 1;
	    break;
	} else if (shared > 0 ? _locked != -1 : _locked == 0) {
	    // obtained lock
	    _locked += shared;
	    break;
	} else
	    // must try again
	    w.e = make_event(r); // w is still on front
    }

    done.trigger();		// lock was obtained (or done is empty)
    r.clear();			// not interested in r events, so clean up
    w.remove();			// remove wait object from list
    if (shared > 0)		// next waiter might also get a shared lock
	wake();
}

}
