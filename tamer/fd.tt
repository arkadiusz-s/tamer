// -*- mode: c++ -*-
/* Copyright (c) 2007-2008, Eddie Kohler
 * Copyright (c) 2007, Regents of the University of California
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, subject to the conditions
 * listed in the Tamer LICENSE file. These conditions include: you must
 * preserve this copyright notice, and you cannot mention the copyright
 * holders in advertising related to the Software without their permission.
 * The Software is provided WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED. This
 * notice is a summary of the Tamer LICENSE file; the license in that file is
 * legally binding.
 */
#include <tamer/fd.hh>
#include <sys/select.h>
#include <sys/ioctl.h>
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <tamer/tamer.hh>
#include <tamer/fdh.hh>
#include <algorithm>

namespace tamer {

fdhmaster _fdhm;

size_t fd::garbage_size;

int fd::make_nonblocking(int f)
{
    int flags = 1;
    if (::ioctl(f, FIONBIO, &flags) == 0)
	return 0;
    flags = ::fcntl(f, F_GETFL);
    if (flags < 0)
	return flags;
    return ::fcntl(f, F_SETFL, flags | O_NONBLOCK);
}

int fd::make_blocking(int f)
{
    int flags = 0;
    if (::ioctl(f, FIONBIO, &flags) == 0)
	return 0;
    flags = ::fcntl(f, F_GETFL);
    if (flags < 0)
	return flags;
    return ::fcntl(f, F_SETFL, flags & ~O_NONBLOCK);
}

event<> fd::closer()
{
    if (*this) {
	event<> e = fun_event(fdcloser(_p));
	at_close(e);
	return e;
    } else
	return event<>();
}

//#define TAMER_SANS_HELPERS

fd fd::open(const char *filename, int flags, mode_t mode) {
    int f = ::open(filename, flags, mode);
    return fd(f == -1 ? -errno : f);
}

#if TAMER_SANS_HELPERS
void fd::open(const char *filename, int flags, mode_t mode, event<fd> done)
{
    fd nfd;
    int f = ::open(filename, flags | O_NONBLOCK, mode);
    nfd = fd(f == -1 ? -errno : f);
    done.trigger(nfd);
}
#else
tamed static void fd::open(const char *filename, int flags, mode_t mode, event<fd> done)
{
    tvars { int f(); fd nfd; }
    twait { _fdhm.open(filename, flags | O_NONBLOCK, mode, make_event(f)); }
    nfd = fd(f);
    nfd._p->_is_file = true;
    done.trigger(nfd);
}
#endif

int fd::pipe(fd &rfd, fd &wfd)
{
    int pfd[2], r = ::pipe(pfd);
    if (r < 0) {
	rfd = wfd = fd(-errno);
	return -errno;
    } else {
	(void) make_nonblocking(pfd[0]);
	(void) make_nonblocking(pfd[1]);
	rfd = fd(pfd[0]);
	wfd = fd(pfd[1]);
	return 0;
    }
}

void fd::fdimp::fstat(struct stat &stat_out, event<int> done)
{
#if TAMER_SANS_HELPERS
    int x = ::fstat(_fd, &stat_out);
    done.trigger(x == -1 ? -errno : 0);
#else
    _fdhm.fstat(_fd, stat_out, done);
#endif
}

tamed void fd::fdimp::read(void *buf, size_t size, size_t &nread, event<int> done)
{
    tvars {
	size_t pos = 0;
	ssize_t amt;
	passive_ref_ptr<fd::fdimp> hold(this);
    int xfd;
    rendezvous<> r;
    event<> release;
    }

    if (_fd < 0) {
	done.trigger(-EBADF);
	return;
    }

    xfd = _fd;
    if (_is_file) {
    //send rpc to helper, get new non-blocked fd
      release = make_event(r);
      twait { _fdhm.read(_fd, size, make_event(xfd), release); }
      if (xfd < 0 ) {
        // revert back to blocked IO
        xfd = _fd;
        release.trigger();
      }
    }

    twait { _rlock.acquire(make_event()); }

    while (pos != size && (_is_file || (done && xfd >= 0))) {
      //if _is_file we must read until the end
	amt = ::read(xfd, static_cast<char *>(buf) + pos, size - pos);
	if (amt != 0 && amt != (ssize_t) -1) {
	    pos += amt;
	    nread = pos;
	} else if (amt == 0)
	    break;
	else if (errno == EAGAIN || errno == EWOULDBLOCK) {
	    twait { tamer::at_fd_read(xfd, make_event()); }
	} else if (errno != EINTR) {
	    done.trigger(-errno);
	    break;
	}
    }

    if (release)
      release.trigger();

    _rlock.release();
    done.trigger(pos == size || _fd >= 0 ? 0 : -ECANCELED);
}

tamed void fd::fdimp::read_once(void *buf, size_t size, size_t &nread, event<int> done)
{
    tvars {
	ssize_t amt;
	passive_ref_ptr<fd::fdimp> hold(this);
    }

    if (_fd < 0) {
	done.trigger(-EBADF);
	return;
    }

    twait { _rlock.acquire(make_event()); }

    while (done && _fd >= 0) {
	amt = ::read(_fd, static_cast<char *>(buf), size);
	if (amt != 0 && amt != (ssize_t) -1) {
	    nread = amt;
      break;
  } else if (errno == EAGAIN || errno == EWOULDBLOCK) {
	    twait { tamer::at_fd_read(_fd, make_event()); }
	} else if (errno != EINTR) {
	    done.trigger(-errno);
	    break;
	}
    }

    _rlock.release();
    done.trigger(0);
}

tamed void fd::fdimp::write(const void *buf, size_t size, size_t &nwritten, event<int> done)
{
    tvars {
	size_t pos = 0;
	ssize_t amt;
	passive_ref_ptr<fd::fdimp> hold(this);
	int xfd;
	rendezvous<> r;
	event<> release;
    }

    if (_fd < 0) {
	done.trigger(-EBADF);
	return;
    }

    xfd = _fd;

    if (_is_file) {
	//send rpc to helper, get new non-blocked fd
	release = make_event(r);
	twait { _fdhm.write(_fd, size, make_event(xfd), release); }
	if (xfd < 0) {
	    // revert back to blocked IO
	    xfd = _fd;
	    release.trigger();
	}
    }

    twait { _wlock.acquire(make_event()); }

    //if _is_file we must read until the end
    while (pos != size && (_is_file || (done && xfd >= 0))) {
	amt = ::write(xfd, static_cast<const char *>(buf) + pos, size - pos);
	if (amt != 0 && amt != (ssize_t) -1) {
	    pos += amt;
	    nwritten = pos;
	} else if (amt == 0)
	    break;
	else if (errno == EAGAIN || errno == EWOULDBLOCK) {
	    twait { tamer::at_fd_write(xfd, make_event()); }
	} else if (errno != EINTR) {
	    done.trigger(-errno);
	    break;
	}
    }

    if (release)
	release.trigger();

    _wlock.release();
    done.trigger(pos == size || _fd >= 0 ? 0 : -ECANCELED);
}

tamed void fd::fdimp::write(std::string s, size_t &nwritten, event<int> done)
{
    twait {
	done.at_trigger(make_event());
	write(s.data(), s.length(), nwritten, done);
    }
}

tamed void fd::fdimp::write_once(const void *buf, size_t size, size_t &nwritten, event<int> done)
{
    tvars {
	passive_ref_ptr<fd::fdimp> hold(this);
	ssize_t amt;
    }

    if (_fd < 0) {
	done.trigger(-EBADF);
	return;
    }

    twait { _wlock.acquire(make_event()); }

    //if _is_file we must read until the end
    while (done && _fd >= 0) {
	amt = ::write(_fd, static_cast<const char *>(buf), size);
	if (amt != (ssize_t) -1) {
	    nwritten = amt;
	    break;
	} else if (errno == EAGAIN || errno == EWOULDBLOCK) {
	    twait { tamer::at_fd_write(_fd, make_event()); }
	} else if (errno != EINTR) {
	    done.trigger(-errno);
	    break;
	}
    }

    _wlock.release();
    done.trigger(0);
}

tamed void fd::fdimp::sendmsg(const void *buf, size_t size, int transfer_fd,
			      event<int> done)
{
    tvars {
	struct msghdr msg;
	struct iovec iov;
	char transfer_fd_space[CMSG_SPACE(sizeof(int))];
	ssize_t amt;
    }

    // prepare message
    {
	msg.msg_name = 0;
	msg.msg_namelen = 0;
	msg.msg_iov = &iov;
	msg.msg_iovlen = 1;
	msg.msg_flags = 0;
	iov.iov_base = const_cast<void *>(buf);
	iov.iov_len = size;

	if (transfer_fd < 0) {
	    msg.msg_control = 0;
	    msg.msg_controllen = 0;
	} else {
	    msg.msg_control = transfer_fd_space;
	    msg.msg_controllen = CMSG_SPACE(sizeof(int));
	    struct cmsghdr *cmsg = CMSG_FIRSTHDR(&msg);
	    cmsg->cmsg_level = SOL_SOCKET;
	    cmsg->cmsg_type = SCM_RIGHTS;
	    cmsg->cmsg_len = CMSG_LEN(sizeof(int));
	    memcpy(CMSG_DATA(cmsg), &transfer_fd, sizeof(int));
	}
    }

    // send message
    while (done && _fd >= 0) {
	amt = ::sendmsg(_fd, &msg, 0);
	if (amt != (ssize_t) -1)
	    break;
	else if (errno == EAGAIN || errno == EWOULDBLOCK) {
	    twait { tamer::at_fd_write(_fd, make_event()); }
	} else if (errno != EINTR)
	    done.trigger(-errno);
    }

    done.trigger(_fd >= 0 ? 0 : -ECANCELED);
}

fd fd::socket(int domain, int type, int protocol)
{
    int f = ::socket(domain, type, protocol);
    if (f >= 0)
	make_nonblocking(f);
    return fd(f == -1 ? -errno : f);
}

int fd::listen(int backlog)
{
    if (*this)
	return (::listen(_p->_fd, backlog) == 0 ? 0 : -errno);
    else
	return -EBADF;
}

int fd::bind(const struct sockaddr *addr, socklen_t addrlen)
{
    if (*this)
	return (::bind(_p->_fd, addr, addrlen) == 0 ? 0 : -errno);
    else
	return -EBADF;
}

tamed void fd::fdimp::accept(struct sockaddr *addr_out, socklen_t *addrlen_out, event<fd> done)
{
    tvars {
	int f = -ECANCELED;
	passive_ref_ptr<fd::fdimp> hold(this);
    }

    if (_fd < 0) {
	done.trigger(fd());
	return;
    }

    twait { _rlock.acquire(make_event()); }

    while (done && _fd >= 0) {
	f = ::accept(_fd, addr_out, addrlen_out);
	if (f >= 0) {
	    make_nonblocking(f);
	    break;
	} else if (errno == EAGAIN || errno == EWOULDBLOCK) {
	    twait { tamer::at_fd_read(_fd, make_event()); }
	} else if (errno != EINTR) {
	    f = -errno;
	    break;
	}
    }

    _rlock.release();
    done.trigger(fd(f));
}

tamed void fd::fdimp::connect(const struct sockaddr *addr, socklen_t addrlen, event<int> done)
{
    tvars {
	int x, ret(0);
	passive_ref_ptr<fd::fdimp> hold(this);
    }

    if (_fd < 0) {
	done.trigger(-EBADF);
	return;
    }

    twait { _wlock.acquire(make_event()); }

    x = ::connect(_fd, addr, addrlen);
    if (x == -1 && errno != EINPROGRESS)
	ret = -errno;
    else if (x == -1) {
	twait { tamer::at_fd_write(_fd, make_event()); }
	socklen_t socklen = sizeof(x);
	if (!done || _fd < 0)
	    ret = -ECANCELED;
	else if (getsockopt(_fd, SOL_SOCKET, SO_ERROR, (void *) &x, &socklen) == -1)
	    ret = -errno;
	else if (ret > 0)
	    ret = -x;
    }

    _wlock.release();
    done.trigger(ret);
}


int fd::fdimp::close(int leave_error)
{
    int my_fd = _fd;
    if (my_fd >= 0 || leave_error != -EBADF)
	_fd = leave_error;
    if (my_fd >= 0) {
	int x = ::close(my_fd);
	if (x == -1) {
	    x = -errno;
	    if (_fd == -EBADF)
		_fd = -errno;
	}
	driver::main->kill_fd(my_fd);
	_at_close.trigger();
	_at_close = event<>();
	return x;
    } else
	return -EBADF;
}

void fd::close(event<int> done)
{
    done.trigger(*this ? _p->close() : -EBADF);
}


namespace fdx {

void tcp_listen(int port, int backlog, event<fd> result)
{
    fd f = fd::socket(AF_INET, SOCK_STREAM, 0);
    if (f) {
	// Default to reusing port addresses.  Don't worry if it fails
	int yes = 1;
	(void) setsockopt(f.value(), SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int));

	struct sockaddr_in saddr;
	saddr.sin_family = AF_INET;
	saddr.sin_port = htons(port);
	saddr.sin_addr.s_addr = INADDR_ANY;
	int ret = f.bind((struct sockaddr *) &saddr, sizeof(saddr));
	if (ret >= 0)
	    ret = f.listen(backlog);
	if (ret < 0 && f)
	    f.error_close(ret);
    }
    result.trigger(f);
}

tamed void tcp_connect(struct in_addr addr, int port, event<fd> result)
{
    tvars {
	fd f = fd::socket(AF_INET, SOCK_STREAM, 0);
	int ret = 0;
	struct sockaddr_in saddr;
    }
    if (f)
	twait {
	    memset(&saddr, 0, sizeof(saddr));
	    saddr.sin_family = AF_INET;
	    saddr.sin_addr = addr;
	    saddr.sin_port = htons(port);
	    f.connect((struct sockaddr *) &saddr, sizeof(saddr), make_event(ret));
	}
    if (ret < 0 && f)
	f.error_close(ret);
    result.trigger(f);
}

tamed void udp_connect(struct in_addr addr, int port, event<fd> result) {
    tvars {
	fd f = fd::socket(AF_INET, SOCK_DGRAM, 0);
	int ret = 0;
	struct sockaddr_in saddr;
    }
    if (f)
	twait {
	    memset(&saddr, 0, sizeof(saddr));
	    saddr.sin_family = AF_INET;
	    saddr.sin_addr = addr;
	    saddr.sin_port = htons(port);
	    f.connect((struct sockaddr *) &saddr, sizeof(saddr), make_event(ret));
	}
    if (ret < 0 && f)
	f.error_close(ret);
    result.trigger(f);
}

static int kill_exec_fds(std::vector<exec_fd> &exec_fds,
			 std::vector<int> &inner_fds, int error) {
    assert(error < 0);
    for (std::vector<exec_fd>::size_type i = 0; i != exec_fds.size(); ++i) {
	exec_fds[i].f = fd(error);
	if ((exec_fds[i].type == exec_fd::fdtype_newin
	     || exec_fds[i].type == exec_fd::fdtype_newout)
	    && inner_fds[i] >= 0)
	    close(inner_fds[i]);
    }
    return error;
}

pid_t exec(std::vector<exec_fd> &exec_fds, const char *program, bool path,
	   const std::vector<const char *> &argv, char * const envp[])
{
    std::vector<int> inner_fds(exec_fds.size(), -1);
    int r, pfd[2];

    // open pipes
    for (std::vector<exec_fd>::size_type i = 0; i != exec_fds.size(); ++i)
	if (exec_fds[i].type == exec_fd::fdtype_newin
	    || exec_fds[i].type == exec_fd::fdtype_newout) {
	    if ((r = ::pipe(pfd)) < 0)
		return kill_exec_fds(exec_fds, inner_fds, -errno);
	    bool isoutput = (exec_fds[i].type == exec_fd::fdtype_newout);
	    exec_fds[i].f = fd(pfd[!isoutput]);
	    (void) fd::make_nonblocking(exec_fds[i].f.value());
	    inner_fds[i] = pfd[isoutput];
	} else
	    inner_fds[i] = exec_fds[i].f.value();

    // create child
    pid_t child = fork();
    if (child < 0)
	return kill_exec_fds(exec_fds, inner_fds, -errno);
    else if (child == 0) {
	if (exec_fds.size() > 0) {
	    // close parent's descriptors
	    for (std::vector<exec_fd>::iterator it = exec_fds.begin();
		 it != exec_fds.end(); ++it)
		if (it->type == exec_fd::fdtype_newin
		    || it->type == exec_fd::fdtype_newout)
		    it->f.close();

	    // duplicate our descriptors into their proper places
	    for (std::vector<exec_fd>::size_type i = 0;
		 i != exec_fds.size(); ++i) {
		if (exec_fds[i].child_fd == inner_fds[i])
		    continue;
		std::vector<int>::iterator xt =
		    std::find(inner_fds.begin() + i, inner_fds.end(),
			      exec_fds[i].child_fd);
		if (xt != inner_fds.end())
		    if ((*xt = ::dup(*xt)) < 0)
			exit(1);
		if (inner_fds[i] >= 0) {
		    if (::dup2(inner_fds[i], exec_fds[i].child_fd) < 0)
			exit(1);
		    (void) ::close(inner_fds[i]);
		} else
		    (void) ::close(exec_fds[i].child_fd);
	    }
	}

	// create true argv array
	char **xargv = new char *[argv.size() + 1];
	if (!xargv)
	    abort();
	for (std::vector<const char *>::size_type i = 0; i != argv.size(); ++i)
	    xargv[i] = (char *) argv[i];
	xargv[argv.size()] = 0;

	// execute
	if (!path)
	    r = ::execve(program, (char * const *) xargv,
			 envp ? envp : environ);
	else
	    r = ::execvp(program, (char * const *) xargv);
	exit(1);
    }

    // close relevant descriptors and return
    for (std::vector<exec_fd>::size_type i = 0; i != exec_fds.size(); ++i)
	if (exec_fds[i].type == exec_fd::fdtype_newin
	    || exec_fds[i].type == exec_fd::fdtype_newout) {
	    ::close(inner_fds[i]);
	    (void) ::fcntl(exec_fds[i].f.value(), F_SETFD, FD_CLOEXEC);
	} else if (exec_fds[i].type == exec_fd::fdtype_transfer)
	    exec_fds[i].f.close();

    return child;
}

}}
