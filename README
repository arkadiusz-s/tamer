TAMER
=====

   Tamer is a C++ language extension and library that simplifies
event-driven programming.  Functions in Tamer can block to wait for an
event, then resume computation later.  While one function is blocked, other
functions can continue their computation.  This is as easy as threaded
programming, but avoids most synchronization and locking issues and
generally requires less memory.

   Tamer contains a preprocessor that compiles Tamer abstractions into
conventional C++ code, the Tamer libraries for event-driven programming,
and several examples, including a working port of the Knot web server
distributed with the Capriccio threading package.

   Installation is standard; run "./configure", supplying any options, then
"make install".  Documentation is supplied in manual page format, and as
doxygen comments in the user-facing header files in "tamer/".  After "make
install", try "man 3 tamer"; before installation, try "nroff -man
doc/tamer.3 | less" .


Why Tamer?
----------

   Tamer is a lightweight version of the Tame event-driven programming
package distributed as part of SFSlite.  For historical reasons, Tame
follows SFS conventions, and requires a wide variety of less than
documented general-purpose classes, including strings, string buffers,
vectors, hash tables, linked lists, and reference counts.  Better, or at
least more standard, versions of many of these classes are available as
part of the C++ standard library and the Boost libraries.  Additionally,
the Tame abstractions are layered on top of SFSlite's existing "wrap"
callbacks, adding complexity and minor overhead.

   Tamer is a freestanding port of the basic Tame abstractions to a
standard C++ environment.  Although currently less powerful than Tame and
SFSlite -- for example, Tamer code can block on disk I/O, a problem SFSlite
can solve with RPCs, and SFSlite ships with an asynchronous DNS resolver --
Tamer is much smaller and lighter weight.  It was also designed to be
easier to use.

   If your main concern is code readability, try Tamer.  If you really can
never block, or would benefit from built-in RPC support, try Tame.


License and Non-Warranty
------------------------

   The Tamer libraries and examples are distributed under the BSD license.
See the file "LICENSE", which is described in the source code as "the Tamer
LICENSE file".

   The "tamer" preprocessor, which consists of the source code in the
"compiler" subdirectory, is distributed under the GNU General Public
License, Version 2.  See the file "COPYING" in that directory.  This means
that any modifications to the compiler are subject to the terms of the GPL.
The preprocessor's output is NOT a "derived work", however, so the tamer
preprocessor may be used to compile software using any licensing terms.

   The "knot.tamer" server in the "knot" directory is derived from the
"knot" server, distributed as part of the Capriccio system.  We believe
this server was released under the BSD license.  See "knot/README".


Bugs and Contributing
---------------------

   We are happy to accept bug reports, patches, and contributions of code,
for example to improve Tamer's support for nonblocking disk I/O.  Send them
to Eddie Kohler at the address below.


Authors
-------

Eddie Kohler <kohler@cs.ucla.edu>
http://www.cs.ucla.edu/~kohler/

Dero Gharibian
File open/read/write/fstat helper for asynchronous disk I/O; asynchronous
DNS resolver.

Maxwell Krohn <krohn@mit.edu>
http://www.okws.org/
Especially for the original version of the tamer preprocessor and
consultation on the name of the fileio:: namespace.
